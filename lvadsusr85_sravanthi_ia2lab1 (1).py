# -*- coding: utf-8 -*-
"""LVADSUSR85_Sravanthi_ia2lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1icRO_Q8Onaq8cTvEDnO4hpAWd9lJXdrw
"""

import numpy as np
import pandas as pd


data = pd.read_csv('/content/winequality-red.csv')
df = pd.DataFrame(data)
df.info()
df['fixed acidity'].fillna(df['fixed acidity'].mean(),inplace = True)
df['volatile acidity'].fillna(df['volatile acidity'].mean(),inplace = True)
df['citric acid'].fillna(df['citric acid'].ffill(),inplace = True)
df['residual sugar'].fillna(df['residual sugar'].ffill(),inplace = True)
df['chlorides'].fillna(df['chlorides'].median(),inplace = True)
df['free sulfur dioxide'].fillna(df['free sulfur dioxide'].mean(),inplace = True)
df['sulphates'].fillna(df['sulphates'].median(),inplace = True)
df.isnull().sum()

import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(df['alcohol'])
plt.show()

Q1 = df['alcohol'].quantile(0.25)
Q3 = df['alcohol'].quantile(0.75)
IQR = Q3 - Q1
lower_limit = Q1 - (1.5*IQR)
upper_limit = Q3 + (1.5*IQR)

df[~(df['alcohol'] < lower_limit) | (df['alcohol'] > upper_limit)]

def transform_quality(quality):
    if quality in range(7, 9):
        return 1
    else:
        return 0
df['quality'] = df['quality'].apply(transform_quality)
print(df)

df.duplicated().sum()
df.drop_duplicates()

from sklearn.model_selection import train_test_split

features = df[['alcohol','pH','density','sulphates','fixed acidity',	'volatile acidity',	'citric acid',
               'residual sugar',	'chlorides',	'free sulfur dioxide',	'total sulfur dioxide']]
labels = df['quality']

x_train,x_test,y_train,y_test = train_test_split(features,labels,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,precision_score,recall_score

rf = RandomForestClassifier()
rf = rf.fit(x_train,y_train)
y_pred = rf.predict(x_test)
acc = accuracy_score(y_test,y_pred)
print(acc)
pre = precision_score(y_test,y_pred)
print(pre)
rec = recall_score(y_test,y_pred)
print(rec)